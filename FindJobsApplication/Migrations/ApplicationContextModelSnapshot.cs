// <auto-generated />
using System;
using FindJobsApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindJobsApplication.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FindJobsApplication.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Avt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Avt = "",
                            Cover = "",
                            Name = "John Doe",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationId");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            CertificationId = 1,
                            Description = "Chứng chỉ phát triển phần mềm.",
                            Name = "Lập trình viên được chứng nhận",
                            Subject = "Kỹ sư phần mềm"
                        },
                        new
                        {
                            CertificationId = 2,
                            Description = "Chứng chỉ quản lý dự án.",
                            Name = "Quản lý dự án được chứng nhận",
                            Subject = "Người quản lý dự án"
                        },
                        new
                        {
                            CertificationId = 3,
                            Description = "Chứng chỉ chuyên sâu về an ninh mạng.",
                            Name = "Chuyên gia bảo mật mạng",
                            Subject = "An ninh mạng"
                        },
                        new
                        {
                            CertificationId = 4,
                            Description = "Chứng chỉ quản lý và bảo trì hệ thống IT.",
                            Name = "Chuyên gia quản lý hệ thống",
                            Subject = "Quản trị hệ thống"
                        },
                        new
                        {
                            CertificationId = 5,
                            Description = "Chứng chỉ phát triển ứng dụng di động.",
                            Name = "Chuyên gia phát triển ứng dụng di động",
                            Subject = "Phát triển ứng dụng"
                        },
                        new
                        {
                            CertificationId = 6,
                            Description = "Chứng chỉ về phân tích và xử lý dữ liệu lớn.",
                            Name = "Chuyên gia phân tích dữ liệu",
                            Subject = "Phân tích dữ liệu"
                        },
                        new
                        {
                            CertificationId = 7,
                            Description = "Chứng chỉ về tiếp thị kỹ thuật số và truyền thông trực tuyến.",
                            Name = "Chuyên gia marketing kỹ thuật số",
                            Subject = "Marketing kỹ thuật số"
                        },
                        new
                        {
                            CertificationId = 8,
                            Description = "Chứng chỉ về thiết kế và kiến trúc phần mềm.",
                            Name = "Kiến trúc sư phần mềm",
                            Subject = "Thiết kế phần mềm"
                        },
                        new
                        {
                            CertificationId = 9,
                            Description = "Chứng chỉ về quản lý và triển khai DevOps.",
                            Name = "Chuyên gia DevOps",
                            Subject = "DevOps"
                        },
                        new
                        {
                            CertificationId = 10,
                            Description = "Chứng chỉ chuyên sâu về phát triển trí tuệ nhân tạo.",
                            Name = "Chuyên gia AI",
                            Subject = "Trí tuệ nhân tạo"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIBehind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostJobServiceCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostJobServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PostJobServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "123 Street",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Skilled developer.",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Phone = "1234567890",
                            PostalCode = "12345",
                            Region = "Region",
                            UserId = 3
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "456 Avenue",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Experienced designer.",
                            FirstName = "Tom",
                            LastName = "Smith",
                            Phone = "0987654321",
                            PostalCode = "67890",
                            Region = "Region",
                            UserId = 5
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "789 Boulevard",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Chuyên gia quản lý dự án.",
                            FirstName = "Ngọc",
                            LastName = "Lê",
                            Phone = "1122334455",
                            PostalCode = "54321",
                            Region = "Region",
                            UserId = 7
                        },
                        new
                        {
                            EmployeeId = 4,
                            Address = "101 Parkway",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Kỹ sư phần mềm tài năng.",
                            FirstName = "Minh",
                            LastName = "Phạm",
                            Phone = "2233445566",
                            PostalCode = "98765",
                            Region = "Region",
                            UserId = 9
                        },
                        new
                        {
                            EmployeeId = 5,
                            Address = "202 Circle",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Nhà thiết kế đồ họa sáng tạo.",
                            FirstName = "Huyền",
                            LastName = "Nguyễn",
                            Phone = "3344556677",
                            PostalCode = "87654",
                            Region = "Region",
                            UserId = 11
                        },
                        new
                        {
                            EmployeeId = 6,
                            Address = "303 Lane",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Chuyên viên phân tích dữ liệu.",
                            FirstName = "Nam",
                            LastName = "Trần",
                            Phone = "4455667788",
                            PostalCode = "76543",
                            Region = "Region",
                            UserId = 13
                        },
                        new
                        {
                            EmployeeId = 7,
                            Address = "404 Road",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Quản lý nhân sự có kinh nghiệm.",
                            FirstName = "Lan",
                            LastName = "Hoàng",
                            Phone = "5566778899",
                            PostalCode = "65432",
                            Region = "Region",
                            UserId = 15
                        },
                        new
                        {
                            EmployeeId = 8,
                            Address = "505 Street",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Chuyên gia phát triển phần mềm.",
                            FirstName = "Khánh",
                            LastName = "Đỗ",
                            Phone = "6677889900",
                            PostalCode = "54312",
                            Region = "Region",
                            UserId = 17
                        },
                        new
                        {
                            EmployeeId = 9,
                            Address = "606 Avenue",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Nhà quản lý sản phẩm tài năng.",
                            FirstName = "Quỳnh",
                            LastName = "Vũ",
                            Phone = "7788990011",
                            PostalCode = "43210",
                            Region = "Region",
                            UserId = 19
                        },
                        new
                        {
                            EmployeeId = 10,
                            Address = "707 Plaza",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Chuyên viên IT chuyên nghiệp.",
                            FirstName = "Tùng",
                            LastName = "Bùi",
                            Phone = "8899001122",
                            PostalCode = "32109",
                            Region = "Region",
                            UserId = 21
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.EmployeeCertification", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeCertificationId"));

                    b.HasKey("EmployeeId", "CertificationId");

                    b.HasIndex("CertificationId");

                    b.ToTable("EmployeeCertifications");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            CertificationId = 1,
                            EmployeeCertificationId = 0
                        },
                        new
                        {
                            EmployeeId = 1,
                            CertificationId = 2,
                            EmployeeCertificationId = 0
                        },
                        new
                        {
                            EmployeeId = 2,
                            CertificationId = 1,
                            EmployeeCertificationId = 0
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employer", b =>
                {
                    b.Property<int>("EmployerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployerId"));

                    b.Property<string>("Avt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIBehind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFounded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyMission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyProjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyServices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyVision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostJobServiceCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostJobServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PostJobServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployerId");

                    b.HasIndex("UserId");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            EmployerId = 1,
                            Avt = "",
                            CompanyName = "Công ty Quản lý Dự án Toàn cầu Ltd.",
                            Cover = "",
                            Description = "Công ty chúng tôi là một trong những đơn vị hàng đầu trong lĩnh vực quản lý dự án toàn cầu, chuyên cung cấp dịch vụ tối ưu cho các doanh nghiệp và tổ chức ở mọi quy mô...",
                            Name = "Nguyễn Thanh Tuấn",
                            UserId = 2
                        },
                        new
                        {
                            EmployerId = 2,
                            Avt = "",
                            CompanyName = "Công ty Sản xuất Thiết bị Điện tử Ltd.",
                            Cover = "",
                            Description = "Công ty chúng tôi nổi tiếng trong ngành sản xuất thiết bị điện tử, luôn đặt chất lượng sản phẩm lên hàng đầu và chú trọng đến sự hài lòng của khách hàng...",
                            Name = "Lê Thị Thu Nhi",
                            UserId = 4
                        },
                        new
                        {
                            EmployerId = 3,
                            Avt = "",
                            CompanyName = "Công ty Phát triển Phần mềm Sáng Tạo Ltd.",
                            Cover = "",
                            Description = "Chúng tôi là công ty chuyên cung cấp các giải pháp phần mềm sáng tạo, giúp các doanh nghiệp hiện đại hóa quy trình làm việc và nâng cao hiệu quả hoạt động...",
                            Name = "Ngô Quang Hùng",
                            UserId = 6
                        },
                        new
                        {
                            EmployerId = 4,
                            Avt = "",
                            CompanyName = "Công ty Xây dựng Hạ Tầng Tiên Phong Ltd.",
                            Cover = "",
                            Description = "Với bề dày kinh nghiệm trong lĩnh vực xây dựng hạ tầng, công ty chúng tôi tự hào là đơn vị tiên phong trong việc cung cấp các giải pháp xây dựng chất lượng cao cho các dự án lớn...",
                            Name = "Phan Thị Trúc Ly",
                            UserId = 8
                        },
                        new
                        {
                            EmployerId = 5,
                            Avt = "",
                            CompanyName = "Công ty Dịch Vụ Vận Tải An Toàn Ltd.",
                            Cover = "",
                            Description = "Công ty chúng tôi chuyên cung cấp dịch vụ vận tải an toàn và đáng tin cậy, luôn cam kết mang lại sự hài lòng tối đa cho khách hàng...",
                            Name = "Hứa Hồng Ân",
                            UserId = 10
                        },
                        new
                        {
                            EmployerId = 6,
                            Avt = "",
                            CompanyName = "Công ty Thương Mại Quốc Tế Minh Long Ltd.",
                            Cover = "",
                            Description = "Chuyên gia trong lĩnh vực thương mại quốc tế, chúng tôi cung cấp các giải pháp kinh doanh tối ưu giúp khách hàng mở rộng thị trường và phát triển bền vững...",
                            Name = "Phan Thành Duy",
                            UserId = 12
                        },
                        new
                        {
                            EmployerId = 7,
                            Avt = "",
                            CompanyName = "Công ty Dịch Vụ Tài Chính Hưng Thịnh Ltd.",
                            Cover = "",
                            Description = "Chúng tôi cung cấp dịch vụ tài chính đáng tin cậy, giúp khách hàng quản lý tài sản và đầu tư hiệu quả thông qua sự tư vấn chuyên nghiệp từ các chuyên gia hàng đầu trong ngành...",
                            Name = "Nguyễn Thành Sơn",
                            UserId = 14
                        },
                        new
                        {
                            EmployerId = 8,
                            Avt = "",
                            CompanyName = "Công ty Xuất Nhập Khẩu Phúc Lợi Ltd.",
                            Cover = "",
                            Description = "Công ty chúng tôi nổi bật trong lĩnh vực xuất nhập khẩu, chuyên cung cấp những sản phẩm và dịch vụ tốt nhất, đáp ứng nhu cầu đa dạng của thị trường trong và ngoài nước...",
                            Name = "Nguyễn Thanh Tùng",
                            UserId = 16
                        },
                        new
                        {
                            EmployerId = 9,
                            Avt = "",
                            CompanyName = "Công ty Đầu Tư Bất Động Sản Nam Phong Ltd.",
                            Cover = "",
                            Description = "Chúng tôi chuyên cung cấp các giải pháp đầu tư bất động sản sáng tạo, giúp khách hàng tối đa hóa lợi nhuận từ các dự án đầu tư của mình...",
                            Name = "Nguyễn Hoàng Lâm",
                            UserId = 18
                        },
                        new
                        {
                            EmployerId = 10,
                            Avt = "",
                            CompanyName = "Công ty Truyền Thông & Quảng Cáo Đỉnh Cao Ltd.",
                            Cover = "",
                            Description = "Chúng tôi là công ty hàng đầu trong lĩnh vực truyền thông và quảng cáo, chuyên cung cấp các giải pháp marketing hiệu quả giúp thương hiệu của bạn tỏa sáng giữa đám đông...",
                            Name = "Nguyễn Hoàng Oanh",
                            UserId = 20
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Hire", b =>
                {
                    b.Property<int>("HireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HireId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobApplyId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HireId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobApplyId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Hires");

                    b.HasData(
                        new
                        {
                            HireId = 1,
                            EmployeeId = 1,
                            EmployerId = 1,
                            HireDate = new DateTime(2024, 11, 8, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(186),
                            JobApplyId = 1,
                            JobId = 1,
                            Status = 0
                        },
                        new
                        {
                            HireId = 2,
                            EmployeeId = 2,
                            EmployerId = 1,
                            HireDate = new DateTime(2024, 10, 29, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(190),
                            JobApplyId = 2,
                            JobId = 1,
                            Status = 0
                        },
                        new
                        {
                            HireId = 3,
                            EmployeeId = 3,
                            EmployerId = 2,
                            HireDate = new DateTime(2024, 11, 3, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(192),
                            JobApplyId = 3,
                            JobId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            Amount = 150m,
                            EmployerId = 1,
                            IssueDate = new DateTime(2024, 11, 8, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(221)
                        },
                        new
                        {
                            InvoiceId = 2,
                            Amount = 200m,
                            EmployerId = 2,
                            IssueDate = new DateTime(2024, 11, 3, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(222)
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            Amount = 1m,
                            DateFrom = new DateTime(2024, 10, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 10, 25, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dọn dẹp sau khi kết thúc tiệc, vệ sinh bàn ghế và khu vực tổ chức tiệc, làm từ 20h - 22h.",
                            EmployerId = 1,
                            IsClosed = false,
                            JobCategoryId = 3,
                            JobType = 1,
                            Location = 15,
                            Salary = 100000m,
                            Title = "Dọn dẹp sau tiệc"
                        },
                        new
                        {
                            JobId = 2,
                            Amount = 1m,
                            DateFrom = new DateTime(2024, 10, 30, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 10, 30, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Phục vụ tiệc cưới cho khách tại nhà hàng, bao gồm mang đồ ăn và hỗ trợ khách, làm từ 18h - 23h. 80k/h",
                            EmployerId = 2,
                            IsClosed = false,
                            JobCategoryId = 1,
                            JobType = 1,
                            Location = 15,
                            Salary = 80000m,
                            Title = "Phục vụ đám cưới"
                        },
                        new
                        {
                            JobId = 3,
                            Amount = 1m,
                            DateFrom = new DateTime(2024, 10, 22, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 10, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thu hoạch rau củ tại ruộng, hỗ trợ đóng gói vào túi, làm từ 6h - 12h. 200k/1 ngày",
                            EmployerId = 3,
                            IsClosed = false,
                            JobCategoryId = 9,
                            JobType = 1,
                            Location = 15,
                            Salary = 200000m,
                            Title = "Thu hoạch rau củ"
                        },
                        new
                        {
                            JobId = 4,
                            Amount = 1m,
                            DateFrom = new DateTime(2024, 10, 26, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 10, 26, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dọn dẹp nhà cửa, giặt đồ, rửa bát, làm từ 14h - 18h. 30k/1h",
                            EmployerId = 4,
                            IsClosed = false,
                            JobCategoryId = 3,
                            JobType = 1,
                            Location = 15,
                            Salary = 30000m,
                            Title = "Giúp việc theo giờ"
                        },
                        new
                        {
                            JobId = 5,
                            Amount = 1m,
                            DateFrom = new DateTime(2024, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 10, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bán hàng, tư vấn khách và đóng gói sản phẩm lưu niệm, làm từ 8h - 12h. 45k/h",
                            EmployerId = 5,
                            IsClosed = false,
                            JobCategoryId = 9,
                            JobType = 1,
                            Location = 15,
                            Salary = 45000m,
                            Title = "Bán hàng lưu niệm"
                        },
                        new
                        {
                            JobId = 6,
                            Amount = 1m,
                            DateFrom = new DateTime(2024, 10, 28, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 10, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tưới cây, bón phân và cắt tỉa cây cảnh tại sân vườn, làm từ 7h - 10h. 50k/h",
                            EmployerId = 6,
                            IsClosed = false,
                            JobCategoryId = 9,
                            JobType = 1,
                            Location = 15,
                            Salary = 50000m,
                            Title = "Chăm sóc cây cảnh"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobApply", b =>
                {
                    b.Property<int>("JobApplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobApplyId"));

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRefuse")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal?>("JobSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobApplyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.ToTable("JobApplies");

                    b.HasData(
                        new
                        {
                            JobApplyId = 1,
                            ApplyDate = new DateTime(2024, 10, 24, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(152),
                            EmployeeId = 1,
                            IsAccept = false,
                            IsRefuse = false,
                            JobId = 1,
                            Status = 0
                        },
                        new
                        {
                            JobApplyId = 2,
                            ApplyDate = new DateTime(2024, 10, 27, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(159),
                            EmployeeId = 2,
                            IsAccept = false,
                            IsRefuse = false,
                            JobId = 1,
                            Status = 0
                        },
                        new
                        {
                            JobApplyId = 3,
                            ApplyDate = new DateTime(2024, 10, 27, 0, 42, 28, 186, DateTimeKind.Local).AddTicks(160),
                            EmployeeId = 3,
                            IsAccept = false,
                            IsRefuse = false,
                            JobId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCategoryId"));

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobCategory");

                    b.HasData(
                        new
                        {
                            JobCategoryId = 1,
                            Image = "https://e7.pngegg.com/pngimages/282/85/png-clipart-catering-restaurant-waiter-logo-chef-mart-restaurant-supply-food-vertebrate-thumbnail.png",
                            JobCategoryName = "Phục vụ"
                        },
                        new
                        {
                            JobCategoryId = 2,
                            Image = "https://i.pinimg.com/736x/ac/02/83/ac02831601243c01d22fdfc98cc45eec.jpg",
                            JobCategoryName = "Giao hàng"
                        },
                        new
                        {
                            JobCategoryId = 3,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS4q1NHyfNcrY8aCIZoo6oc1iB7pe_o0brc0w&s",
                            JobCategoryName = "Dọn dẹp"
                        },
                        new
                        {
                            JobCategoryId = 4,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS0tEZKIIWbIsOTnKM1BFkl7Bhy-UJ5iRtrdw&s",
                            JobCategoryName = "Nấu cơm"
                        },
                        new
                        {
                            JobCategoryId = 5,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRZSoI3sKPbNclvWn4Vugq3kwb1bRITL7oGng&s",
                            JobCategoryName = "Đi chợ"
                        },
                        new
                        {
                            JobCategoryId = 6,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRQ6UxWQc6mbjt8Ed3u1UARTU4ytPVxSZ1t4g&s",
                            JobCategoryName = "Chăm em bé"
                        },
                        new
                        {
                            JobCategoryId = 7,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzDxpicQTpZzRJS1xidKgEg5P7AFa8rpi-JQ&s",
                            JobCategoryName = "Sửa chữa"
                        },
                        new
                        {
                            JobCategoryId = 8,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQni3YqPQR-cMrJu3hB_hPeCevuNpY0SguhZg&s",
                            JobCategoryName = "MC"
                        },
                        new
                        {
                            JobCategoryId = 9,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6bcLlerH8U0ew1SVypV6NCQgKuPHOBFUSvQ&s",
                            JobCategoryName = "Khác"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobService", b =>
                {
                    b.Property<int>("JobServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobServiceId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("jobServiceType")
                        .HasColumnType("int");

                    b.HasKey("JobServiceId");

                    b.HasIndex("AdminId");

                    b.ToTable("JobServices");

                    b.HasData(
                        new
                        {
                            JobServiceId = 1,
                            AdminId = 1,
                            Count = 2,
                            Description = "Gói 2 lần đăng bài",
                            Image = "https://sim.ussh.vnu.edu.vn/uploads/student/2022_04/tuyendung.png",
                            Price = 18000m,
                            ServiceName = "Combo Trải Nghiệm",
                            jobServiceType = 1
                        },
                        new
                        {
                            JobServiceId = 2,
                            AdminId = 1,
                            Count = 5,
                            Description = "Gói 5 lần đăng bài",
                            Image = "https://sim.ussh.vnu.edu.vn/uploads/student/2022_04/tuyendung.png",
                            Price = 39000m,
                            ServiceName = "Combo Ngẫu Hứng",
                            jobServiceType = 1
                        },
                        new
                        {
                            JobServiceId = 3,
                            AdminId = 1,
                            Count = 10,
                            Description = "Gói 10 lần đăng bài",
                            Image = "https://sim.ussh.vnu.edu.vn/uploads/student/2022_04/tuyendung.png",
                            Price = 69000m,
                            ServiceName = "Combo Thoải Mái",
                            jobServiceType = 1
                        },
                        new
                        {
                            JobServiceId = 4,
                            AdminId = 1,
                            Count = 20,
                            Description = "Gói 20 lần đăng bài",
                            Image = "https://sim.ussh.vnu.edu.vn/uploads/student/2022_04/tuyendung.png",
                            Price = 109000m,
                            ServiceName = "Combo Vi Vu",
                            jobServiceType = 1
                        },
                        new
                        {
                            JobServiceId = 5,
                            AdminId = 1,
                            Count = 100,
                            Description = "Gói 100 lần đăng bài",
                            Image = "https://sim.ussh.vnu.edu.vn/uploads/student/2022_04/tuyendung.png",
                            Price = 399000m,
                            ServiceName = "Combo Thả Ga",
                            jobServiceType = 1
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToRoomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("JobServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Công việc rất tốt!",
                            EmployeeId = 1,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Hiệu suất tốt.",
                            EmployeeId = 2,
                            Rating = 4
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Công việc tuyệt vời!",
                            EmployeeId = 1,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("FindJobsApplication.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AdminId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "admin123",
                            Phone = "0123456789",
                            UserType = 0,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "employer1@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0123456456",
                            UserType = 1,
                            Username = "employer1"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "employee1@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0111111111",
                            UserType = 2,
                            Username = "employee1"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "employer2@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0999999999",
                            UserType = 1,
                            Username = "employer2"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "employee2@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0123123123",
                            UserType = 2,
                            Username = "employee2"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "employer3@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0987654321",
                            UserType = 1,
                            Username = "employer3"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "employee3@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0122222222",
                            UserType = 2,
                            Username = "employee3"
                        },
                        new
                        {
                            UserId = 8,
                            Email = "employer4@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0988888888",
                            UserType = 1,
                            Username = "employer4"
                        },
                        new
                        {
                            UserId = 9,
                            Email = "employee4@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee4"
                        },
                        new
                        {
                            UserId = 10,
                            Email = "employer5@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0977777777",
                            UserType = 1,
                            Username = "employer5"
                        },
                        new
                        {
                            UserId = 11,
                            Email = "employee5@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee5"
                        },
                        new
                        {
                            UserId = 12,
                            Email = "employer6@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0977777777",
                            UserType = 1,
                            Username = "employer6"
                        },
                        new
                        {
                            UserId = 13,
                            Email = "employee6@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee6"
                        },
                        new
                        {
                            UserId = 14,
                            Email = "employer7@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0977777777",
                            UserType = 1,
                            Username = "employer7"
                        },
                        new
                        {
                            UserId = 15,
                            Email = "employee7@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee7"
                        },
                        new
                        {
                            UserId = 16,
                            Email = "employer8@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0977777777",
                            UserType = 1,
                            Username = "employer8"
                        },
                        new
                        {
                            UserId = 17,
                            Email = "employee8@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee8"
                        },
                        new
                        {
                            UserId = 18,
                            Email = "employer9@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0977777777",
                            UserType = 1,
                            Username = "employer9"
                        },
                        new
                        {
                            UserId = 19,
                            Email = "employee9@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee9"
                        },
                        new
                        {
                            UserId = 20,
                            Email = "employer10@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0977777777",
                            UserType = 1,
                            Username = "employer10"
                        },
                        new
                        {
                            UserId = 21,
                            Email = "employee10@example.com",
                            Gender = 2,
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0133333333",
                            UserType = 2,
                            Username = "employee10"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Admin", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employee", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.EmployeeCertification", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Certification", "Certification")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employer", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Hire", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("Hires")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Employer", "Employer")
                        .WithMany("Hires")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.JobApply", "JobApply")
                        .WithMany()
                        .HasForeignKey("JobApplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Hires")
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("JobApply");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Invoice", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employer", "Employer")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Job", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employer", "Employer")
                        .WithMany("PostedJobs")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Jobs")
                        .HasForeignKey("UserId");

                    b.Navigation("Employer");

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobApply", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("JobApplies")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Employer", null)
                        .WithMany("JobApplies")
                        .HasForeignKey("EmployerId");

                    b.HasOne("FindJobsApplication.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobService", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Admin", "Admin")
                        .WithMany("JobServices")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Message", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Room", "ToRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ToRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToRoom");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Order", b =>
                {
                    b.HasOne("FindJobsApplication.Models.JobService", "JobService")
                        .WithMany("Orders")
                        .HasForeignKey("JobServiceId");

                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("JobService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Review", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Room", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Rooms")
                        .HasForeignKey("UserId");

                    b.HasOne("FindJobsApplication.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("FindJobsApplication.Models.User", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Admin", null)
                        .WithMany("BannedUsers")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Admin", b =>
                {
                    b.Navigation("BannedUsers");

                    b.Navigation("JobServices");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Certification", b =>
                {
                    b.Navigation("EmployeeCertifications");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employee", b =>
                {
                    b.Navigation("EmployeeCertifications");

                    b.Navigation("Hires");

                    b.Navigation("JobApplies");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employer", b =>
                {
                    b.Navigation("Hires");

                    b.Navigation("Invoices");

                    b.Navigation("JobApplies");

                    b.Navigation("PostedJobs");
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobCategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobService", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Room", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("FindJobsApplication.Models.User", b =>
                {
                    b.Navigation("Hires");

                    b.Navigation("Jobs");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
