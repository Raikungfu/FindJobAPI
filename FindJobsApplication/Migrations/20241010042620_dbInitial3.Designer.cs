// <auto-generated />
using System;
using FindJobsApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindJobsApplication.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241010042620_dbInitial3")]
    partial class dbInitial3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FindJobsApplication.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Avt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Avt = "",
                            Cover = "",
                            Name = "John Doe",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationId");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            CertificationId = 1,
                            Description = "Chứng chỉ phát triển phần mềm.",
                            Name = "Lập trình viên được chứng nhận",
                            Subject = "Kỹ sư phần mềm"
                        },
                        new
                        {
                            CertificationId = 2,
                            Description = "Chứng chỉ quản lý dự án.",
                            Name = "Quản lý dự án được chứng nhận",
                            Subject = "Người quản lý dự án"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "123 Street",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Skilled developer.",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Phone = "1234567890",
                            PostalCode = "12345",
                            Region = "Region",
                            UserId = 3
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "456 Avenue",
                            Avt = "",
                            City = "City",
                            Country = "Country",
                            Cover = "",
                            Description = "Experienced designer.",
                            FirstName = "Tom",
                            LastName = "Smith",
                            Phone = "0987654321",
                            PostalCode = "67890",
                            Region = "Region",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.EmployeeCertification", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeCertificationId"));

                    b.HasKey("EmployeeId", "CertificationId");

                    b.HasIndex("CertificationId");

                    b.ToTable("EmployeeCertifications");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            CertificationId = 1,
                            EmployeeCertificationId = 0
                        },
                        new
                        {
                            EmployeeId = 1,
                            CertificationId = 2,
                            EmployeeCertificationId = 0
                        },
                        new
                        {
                            EmployeeId = 2,
                            CertificationId = 1,
                            EmployeeCertificationId = 0
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employer", b =>
                {
                    b.Property<int>("EmployerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployerId"));

                    b.Property<string>("Avt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIBehind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFounded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyMission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyProjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyServices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyVision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployerId");

                    b.HasIndex("UserId");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            EmployerId = 1,
                            Avt = "",
                            CompanyName = "Công ty TNHH An Phát",
                            Cover = "",
                            Description = "Một công ty tuyệt vời.",
                            Name = "Công ty An Phát",
                            UserId = 2
                        },
                        new
                        {
                            EmployerId = 2,
                            Avt = "",
                            CompanyName = "Công ty TNHH Hoàng Gia",
                            Cover = "",
                            Description = "Một công ty tuyệt vời khác.",
                            Name = "Công ty Hoàng Gia",
                            UserId = 4
                        },
                        new
                        {
                            EmployerId = 3,
                            Avt = "",
                            CompanyName = "Công ty TNHH Bình Minh",
                            Cover = "",
                            Description = "Doanh nghiệp hàng đầu về dịch vụ.",
                            Name = "Công ty Bình Minh",
                            UserId = 6
                        },
                        new
                        {
                            EmployerId = 4,
                            Avt = "",
                            CompanyName = "Công ty Cổ phần TechPro",
                            Cover = "",
                            Description = "Công ty nổi tiếng về công nghệ.",
                            Name = "Công ty TechPro",
                            UserId = 8
                        },
                        new
                        {
                            EmployerId = 5,
                            Avt = "",
                            CompanyName = "Công ty TNHH Minh Tâm",
                            Cover = "",
                            Description = "Chuyên gia trong lĩnh vực sản xuất.",
                            Name = "Công ty Minh Tâm",
                            UserId = 10
                        },
                        new
                        {
                            EmployerId = 6,
                            Avt = "",
                            CompanyName = "Công ty Cổ phần Long Hải",
                            Cover = "",
                            Description = "Nhà cung cấp dịch vụ tài chính hàng đầu.",
                            Name = "Công ty Long Hải",
                            UserId = 12
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Hire", b =>
                {
                    b.Property<int>("HireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HireId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HireId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Hires");

                    b.HasData(
                        new
                        {
                            HireId = 1,
                            EmployeeId = 1,
                            EmployerId = 1,
                            HireDate = new DateTime(2024, 10, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4111),
                            JobId = 1,
                            Status = "Hired"
                        },
                        new
                        {
                            HireId = 2,
                            EmployeeId = 2,
                            EmployerId = 1,
                            HireDate = new DateTime(2024, 9, 30, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4116),
                            JobId = 1,
                            Status = "Hired"
                        },
                        new
                        {
                            HireId = 3,
                            EmployeeId = 1,
                            EmployerId = 2,
                            HireDate = new DateTime(2024, 10, 5, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4123),
                            JobId = 2,
                            Status = "Hired"
                        },
                        new
                        {
                            HireId = 4,
                            EmployeeId = 3,
                            EmployerId = 1,
                            HireDate = new DateTime(2024, 10, 12, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4128),
                            JobId = 3,
                            Status = "Hired"
                        },
                        new
                        {
                            HireId = 5,
                            EmployeeId = 4,
                            EmployerId = 2,
                            HireDate = new DateTime(2024, 10, 15, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4133),
                            JobId = 2,
                            Status = "Hired"
                        },
                        new
                        {
                            HireId = 6,
                            EmployeeId = 5,
                            EmployerId = 2,
                            HireDate = new DateTime(2024, 10, 20, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4138),
                            JobId = 1,
                            Status = "Hired"
                        });
                });
            modelBuilder.Entity("FindJobsApplication.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            Amount = 150m,
                            EmployerId = 1,
                            IssueDate = new DateTime(2024, 10, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4149)
                        },
                        new
                        {
                            InvoiceId = 2,
                            Amount = 200m,
                            EmployerId = 2,
                            IssueDate = new DateTime(2024, 10, 5, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4150)
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            DateFrom = new DateTime(2024, 10, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4033),
                            DateTo = new DateTime(2024, 11, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4048),
                            Description = "Phát triển ứng dụng.",
                            EmployerId = 1,
                            JobCategoryId = 1,
                            JobType = 0,
                            Salary = 60000m,
                            Title = "Lập Trình Viên Phần Mềm"
                        },
                        new
                        {
                            JobId = 2,
                            DateFrom = new DateTime(2024, 10, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4059),
                            DateTo = new DateTime(2024, 12, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4059),
                            Description = "Tạo ra các trang web đẹp.",
                            EmployerId = 1,
                            JobCategoryId = 1,
                            JobType = 0,
                            Salary = 50000m,
                            Title = "Thiết Kế Web"
                        },
                        new
                        {
                            JobId = 3,
                            DateFrom = new DateTime(2024, 10, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4061),
                            DateTo = new DateTime(2025, 1, 10, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4062),
                            Description = "Cải thiện trải nghiệm người dùng.",
                            EmployerId = 2,
                            JobCategoryId = 1,
                            JobType = 1,
                            Salary = 55000m,
                            Title = "Thiết Kế UX/UI"
                        },
                        new
                        {
                            JobId = 4,
                            DateFrom = new DateTime(2024, 10, 15, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4065),
                            DateTo = new DateTime(2025, 2, 15, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4066),
                            Description = "Quản lý dự án phát triển phần mềm.",
                            EmployerId = 2,
                            JobCategoryId = 2,
                            JobType = 0,
                            Salary = 65000m,
                            Title = "Quản Lý Dự Án"
                        },
                        new
                        {
                            JobId = 5,
                            DateFrom = new DateTime(2024, 10, 20, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4070),
                            DateTo = new DateTime(2025, 3, 20, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4071),
                            Description = "Phân tích và thiết kế hệ thống.",
                            EmployerId = 1,
                            JobCategoryId = 3,
                            JobType = 1,
                            Salary = 70000m,
                            Title = "Nhà Phân Tích Hệ Thống"
                        },
                        new
                        {
                            JobId = 6,
                            DateFrom = new DateTime(2024, 10, 25, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4075),
                            DateTo = new DateTime(2025, 4, 25, 11, 26, 19, 629, DateTimeKind.Local).AddTicks(4076),
                            Description = "Cung cấp hỗ trợ kỹ thuật cho khách hàng.",
                            EmployerId = 3,
                            JobCategoryId = 4,
                            JobType = 0,
                            Salary = 48000m,
                            Title = "Nhân Viên Hỗ Trợ Kỹ Thuật"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCategoryId"));

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobCategory");

                    b.HasData(
                        new
                        {
                            JobCategoryId = 1,
                            Image = "",
                            JobCategoryName = "Software Development"
                        },
                        new
                        {
                            JobCategoryId = 2,
                            Image = "",
                            JobCategoryName = "Web Design"
                        },
                        new
                        {
                            JobCategoryId = 3,
                            Image = "",
                            JobCategoryName = "UX/UI Design"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobService", b =>
                {
                    b.Property<int>("JobServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobServiceId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobServiceId");

                    b.HasIndex("AdminId");

                    b.ToTable("JobServices");

                    b.HasData(
                        new
                        {
                            JobServiceId = 1,
                            AdminId = 1,
                            Description = "Đăng tin tuyển dụng.",
                            Price = 100m,
                            ServiceName = "Đăng Tuyển Dụng"
                        },
                        new
                        {
                            JobServiceId = 2,
                            AdminId = 1,
                            Description = "Làm nổi bật tin tuyển dụng của bạn.",
                            Price = 150m,
                            ServiceName = "Nổi Bật Tuyển Dụng"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Công việc rất tốt!",
                            EmployeeId = 1,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Hiệu suất tốt.",
                            EmployeeId = 2,
                            Rating = 4
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Công việc tuyệt vời!",
                            EmployeeId = 1,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AdminId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@example.com",
                            IsBanned = false,
                            PasswordHash = "admin123",
                            Phone = "0123456789",
                            UserType = 0,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "employer1@example.com",
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0123456456",
                            UserType = 1,
                            Username = "employer1"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "employee1@example.com",
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0111111111",
                            UserType = 2,
                            Username = "employee1"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "employer2@example.com",
                            IsBanned = false,
                            PasswordHash = "employer123",
                            Phone = "0999999999",
                            UserType = 1,
                            Username = "employer2"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "employee2@example.com",
                            IsBanned = false,
                            PasswordHash = "employee123",
                            Phone = "0123123123",
                            UserType = 2,
                            Username = "employee2"
                        });
                });

            modelBuilder.Entity("FindJobsApplication.Models.Admin", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employee", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.EmployeeCertification", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Certification", "Certification")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employer", b =>
                {
                    b.HasOne("FindJobsApplication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Hire", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("Hires")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Employer", "Employer")
                        .WithMany("Hires")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Hires")
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("Employer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Invoice", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employer", "Employer")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Job", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employer", "Employer")
                        .WithMany("PostedJobs")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Jobs")
                        .HasForeignKey("UserId");

                    b.Navigation("Employer");

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobService", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Admin", "Admin")
                        .WithMany("JobServices")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Review", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Employee", "Employee")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsApplication.Models.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FindJobsApplication.Models.User", b =>
                {
                    b.HasOne("FindJobsApplication.Models.Admin", null)
                        .WithMany("BannedUsers")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Admin", b =>
                {
                    b.Navigation("BannedUsers");

                    b.Navigation("JobServices");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Certification", b =>
                {
                    b.Navigation("EmployeeCertifications");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employee", b =>
                {
                    b.Navigation("EmployeeCertifications");

                    b.Navigation("Hires");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FindJobsApplication.Models.Employer", b =>
                {
                    b.Navigation("Hires");

                    b.Navigation("Invoices");

                    b.Navigation("PostedJobs");
                });

            modelBuilder.Entity("FindJobsApplication.Models.JobCategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("FindJobsApplication.Models.User", b =>
                {
                    b.Navigation("Hires");

                    b.Navigation("Jobs");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
